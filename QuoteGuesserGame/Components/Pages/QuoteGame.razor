@page "/quotegame"
@using Newtonsoft.Json
@rendermode InteractiveServer

<PageTitle>Quote Game</PageTitle>


<h1>QuoteGame</h1>

<h2>Guess who said it?</h2>


@if (_currentQuote == "ron")
{
    <p>@_ronObject[0]</p>
}
else if (_currentQuote == "kanye")
{
    <p>@_kanyeObject.Quote</p>
}
else
{
    <p>@_michaelScottObject.Statement</p>
}


<img class="ron-box" src="/Images/ronswanson_headshot.jpg" alt="Ron Swanson" @onclick="GuessRon"/>
<img class="box" src="/Images/kanye_west_headshot.jpg" alt="Kanye West" @onclick="GuessKanye"/>
<img class="box" src="/Images/michael_scott_headshot.jpg" alt="Michael Scott" @onclick="GuessMichaelScott"/>


@if (!string.IsNullOrEmpty(_feedbackMessage))
{
    <p>@_feedbackMessage</p>
}


@code {
    private QuoteService? _quoteService;
    private List<string> _ronObject = new();
    private Kanye _kanyeObject = new();
    private List<Quote> _michaelScottObjects = new();
    private Quote _michaelScottObject = new();
    private string? _currentQuote;
    private string? _feedbackMessage;

    protected override async Task OnInitializedAsync()
    {
        _quoteService = new QuoteService();
        await RandomQuote(_quoteService);
    }

    private static int RandomNumber()
    {
        Random random = new Random();
        int randomNumber = random.Next(0, 3);
        return randomNumber;
    }

    private async Task RandomQuote(QuoteService quoteService)
    {
        int randomNumber = RandomNumber();

        if (randomNumber == 1)
        {
            var ronRequest = await quoteService.RonRequest();
            _ronObject = ResponseDeserializer.DeserializeRon(ronRequest);
            _currentQuote = "ron";
        }
        else if (randomNumber == 2)
        {
            var kanyeRequest = await quoteService.KanyeRequest();
            _kanyeObject = ResponseDeserializer.DeserializeKanye(kanyeRequest);
            _currentQuote = "kanye";
        }
        else
        {
            var michaelScottRequest = await quoteService.MichaelScottRequest();
            var michaelScottQuotes = ResponseDeserializer.DeserializeMichaelScott(michaelScottRequest);
            var randomQuote = michaelScottQuotes[new Random().Next(michaelScottQuotes.Count)].Statement;
            _michaelScottObject = new Quote { Statement = randomQuote };
            _currentQuote = "michael scott";
        }
    }

    private void GuessRon()
    {
        if (_currentQuote == "ron")
        {
            _feedbackMessage = "Correct!";
        }
        else
        {
            _feedbackMessage = "Incorrect";
        }
    }

    private void GuessKanye()
    {
        if (_currentQuote == "kanye")
        {
            _feedbackMessage = "Correct!";
        }
        else
        {
            _feedbackMessage = "Incorrect";
        }
    }

    private void GuessMichaelScott()
    {
        if (_currentQuote == "michael scott")
        {
            _feedbackMessage = "Correct!";
        }
        else
        {
            _feedbackMessage = "Incorrect";
        }
    }

    public class Kanye
    {
        public string Quote { get; set; }
    }

    public class Quote
    {
        public string Statement { get; set; }
    }
    

    public class QuoteService
    {
        private HttpClient _client = new();
        private readonly string _kanyeUrl = "https://api.kanye.rest";
        private readonly string _ronUrl = "https://ron-swanson-quotes.herokuapp.com/v2/quotes";
        private readonly string _michaelScottUrl = "https://localhost:44393/quotes";

        public async Task<string> KanyeRequest()
        {
            try
            {
                var kanyeResponse = await _client.GetStringAsync(_kanyeUrl);
                return kanyeResponse;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return null;
            }
        }

        public async Task<string> RonRequest()
        {
            try
            {
                var ronResponse = await _client.GetStringAsync(_ronUrl);
                return ronResponse;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return null;
            }
        }

        public async Task<string> MichaelScottRequest()
        {
            try
            {
                var response = await _client.GetStringAsync(_michaelScottUrl);
                return response;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return null;
            }
            
        }
    }

    public static class ResponseDeserializer
    {
        public static Kanye DeserializeKanye(string kanyeResponse) => JsonConvert.DeserializeObject<Kanye>(kanyeResponse);

        public static List<string> DeserializeRon(string ronResponse) => JsonConvert.DeserializeObject<List<string>>(ronResponse);
        public static List<Quote> DeserializeMichaelScott(string michaelScottResponse) => JsonConvert.DeserializeObject<List<Quote>>(michaelScottResponse);
    }


}